#!/usr/bin/env node

const csvParser = require("csv-parser");
const fs = require("fs");
const path = require("path");
const sqlite3 = require("sqlite3").verbose();
const debug = require("debug")("initdb");

const usage = () => {
  const app = path.basename(process.argv[1]);
  console.log(`${app} path/to/ecdict.csv path/to/ecdict.sqlite

Read the CSV file, parse it, then write the result to the SQLite file.`);
};

const main = async () => {
  const [csvFile, sqlFile] = process.argv.slice(2);
  if (!(csvFile && sqlFile)) {
    console.log(`Missing arguments\n`);
    usage();
    process.exitCode = 1;
    return;
  }
  if (fs.existsSync(sqlFile)) {
    console.log(`${sqlFile} exists, please delete it\n`);
    usage();
    process.exitCode = 1;
    return;
  }

  const db = new sqlite3.Database(sqlFile);
  db.serialize(async () => {
    db.run("CREATE TABLE dict (word TEXT, translation TEXT)");
    const csvInput = fs.createReadStream(csvFile, "utf-8");
    const parser = csvParser({
      delimiter: ",",
    });
    csvInput.pipe(parser);
    let n = 0;
    for await (const record of parser) {
      n++;
      if (n % 100 === 0) console.log(n);
      const { word, translation } = record;
      db.run(`INSERT INTO dict VALUES (?, ?)`, [word, translation])
    }
    console.log(`Add ${n} words`);
    db.get(`select count(*) from dict`, (err, row) => {
      console.log(err, row);
    });
  });
};

main();
